name: GitOps Application Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "config/**"
      - "db/**"
      - "lib/**"
      - "k8s/**"
      - "Dockerfile"
      - "docker-compose.yml"
      - "Gemfile*"
      - "package.json"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      skip_tests:
        description: "Skip running tests"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          bundle install
          npm ci

      - name: Run Ruby tests
        run: bundle exec rails test

      - name: Run JavaScript tests
        run: npm test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: success() || github.event.inputs.skip_tests == true
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-k8s-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update image references
        run: |
          # Update image tag in kustomization files
          find k8s -name "kustomization.yaml" -exec sed -i "s|newTag:.*|newTag: ${{ github.sha }}|" {} \;

      - name: Commit manifest updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update k8s manifests with image ${{ github.sha }}"
            git push
          fi

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, update-k8s-manifests]
    if: success()

    steps:
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ GitOps Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD will automatically sync the changes" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor deployment in ArgoCD dashboard" >> $GITHUB_STEP_SUMMARY
          echo "3. Check application health endpoints" >> $GITHUB_STEP_SUMMARY
          echo "4. Review logs in Loki/Grafana" >> $GITHUB_STEP_SUMMARY
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      - name: Update application image
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          IMAGE_TAG=${{ github.sha }}

          # Update the application deployment with new image
          kubectl set image deployment/magebase-app \
            magebase=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n magebase-${ENVIRONMENT}

      - name: Wait for rollout to complete
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          kubectl rollout status deployment/magebase-app -n magebase-${ENVIRONMENT} --timeout=300s

      - name: Run database migrations
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          kubectl exec -n magebase-${ENVIRONMENT} \
            $(kubectl get pods -n magebase-${ENVIRONMENT} -l app=magebase-app -o jsonpath='{.items[0].metadata.name}') \
            -- bundle exec rails db:migrate

      - name: Health check
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          # Wait for the application to be ready
          kubectl wait --for=condition=ready pod -l app=magebase-app -n magebase-${ENVIRONMENT} --timeout=300s

          # Perform health check
          kubectl exec -n magebase-${ENVIRONMENT} \
            $(kubectl get pods -n magebase-${ENVIRONMENT} -l app=magebase-app -o jsonpath='{.items[0].metadata.name}') \
            -- curl -f http://localhost:3000/health || exit 1
