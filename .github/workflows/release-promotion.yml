name: Environment Promotion Pipeline

on:
  release:
    types: [published]
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'k8s/**'

concurrency:
  group: promotion-${{ github.event_name }}-${{ github.event.pull_request.title || github.event.release.tag_name || 'unknown' }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: magebase/site

jobs:
  handle-release:
    name: Handle New Release
    runs-on: ubicloud-standard-2-arm
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract release information
        id: release-info
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_VERSION="$RELEASE_TAG"
          IMAGE_TAG="${RELEASE_TAG#v}"

          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Triggered by release: $RELEASE_TAG"

      - name: Create release branch for QA promotion
        run: |
          RELEASE_VERSION="${{ steps.release-info.outputs.release_version }}"
          RELEASE_BRANCH="release/${RELEASE_VERSION}"

          # Check if branch already exists
          if git ls-remote --heads origin $RELEASE_BRANCH | grep $RELEASE_BRANCH; then
            echo "Branch $RELEASE_BRANCH already exists, checking it out"
            git checkout $RELEASE_BRANCH
            git pull origin $RELEASE_BRANCH
          else
            echo "Creating new release branch: $RELEASE_BRANCH"
            git checkout -b $RELEASE_BRANCH
            git push -u origin $RELEASE_BRANCH
          fi

      - name: Update QA k8s configuration
        run: |
          IMAGE_TAG="${{ steps.release-info.outputs.image_tag }}"
          RELEASE_VERSION="${{ steps.release-info.outputs.release_version }}"

          echo "Updating QA environment with image tag: $IMAGE_TAG"

          # Create QA overlay if it doesn't exist
          TARGET_OVERLAY_DIR="k8s/overlays/qa"
          if [ ! -d "$TARGET_OVERLAY_DIR" ]; then
            echo "Creating overlay directory for QA"
            mkdir -p "$TARGET_OVERLAY_DIR"

            # Create kustomization.yaml
            cat > "$TARGET_OVERLAY_DIR/kustomization.yaml" << 'EOF'
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization

          resources:
            - ../../base

          patchesStrategicMerge:
            - qa-patches.yaml

          configMapGenerator:
            - name: magebase-config
              behavior: replace
              literals:
                - RAILS_ENV=production
                - RAILS_LOG_TO_STDOUT=true
                - RAILS_SERVE_STATIC_FILES=true

          secretGenerator:
            - name: magebase-secrets
              behavior: replace
              literals:
                - secret-key-base=${SECRET_KEY_BASE}
                - ruby-llm-api-key=${RUBY_LLM_API_KEY}
                - aws-ses-access-key-id=${AWS_SES_ACCESS_KEY_ID}
                - aws-ses-secret-access-key=${AWS_SES_SECRET_ACCESS_KEY}
          EOF

            # Create environment-specific patches
            cat > "$TARGET_OVERLAY_DIR/qa-patches.yaml" << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: magebase-app
            namespace: magebase
          spec:
            template:
              spec:
                containers:
                  - name: magebase
                    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          EOF

            echo "âœ… Created k8s overlay for QA"
          else
            echo "Overlay directory exists, updating image tag"
            # Update existing overlay with new image tag
            sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" "$TARGET_OVERLAY_DIR/qa-patches.yaml"
          fi

          # Stage and commit changes
          git add k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: promote ${RELEASE_VERSION} to QA environment

          - Updated k8s configuration for QA
          - Image tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          - Source environment: dev
          - Target environment: qa"
            git push origin HEAD
          fi

      - name: Create promotion PR to QA
        run: |
          RELEASE_VERSION="${{ steps.release-info.outputs.release_version }}"
          RELEASE_BRANCH="release/${RELEASE_VERSION}"

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "$RELEASE_BRANCH" --json number --jq '.[0].number')

          if [ -n "$EXISTING_PR" ]; then
            echo "PR #$EXISTING_PR already exists for $RELEASE_BRANCH"
          else
            # Create new PR
            PR_TITLE="ðŸš€ Promote $RELEASE_VERSION to QA"
            PR_BODY=$(cat <<EOF
          ## ðŸš€ Environment Promotion

          **Release:** $RELEASE_VERSION
          **From:** dev
          **To:** QA
          **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release-info.outputs.image_tag }}\`

          ### Changes
          - Updated Kubernetes configuration for QA environment
          - Image tag updated to match release version
          - Ready for deployment to QA

          ### Checklist
          - [ ] Code review completed
          - [ ] Tests passing in dev
          - [ ] Performance validated
          - [ ] Security scan passed
          - [ ] Ready for QA deployment

          /cc @magebase/dev-team
          EOF
          )

            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --head "$RELEASE_BRANCH" \
              --base "main" \
              --label "environment-promotion,qa"

            echo "âœ… Created PR for QA promotion"
          fi
  handle-pr-merge:
    name: Handle Promotion PR Merge
    runs-on: ubicloud-standard-2-arm
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract deployment information
        id: deploy-info
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Extract target environment from PR title (format: "ðŸš€ Promote v1.2.3 to qa")
          if [[ $PR_TITLE =~ "Promote v[0-9]+\.[0-9]+\.[0-9]+ to (qa|uat|prod)" ]]; then
            TARGET_ENV="${BASH_REMATCH[1]}"
            echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
            echo "Deploying to: $TARGET_ENV"
          else
            echo "Could not extract target environment from PR title: $PR_TITLE"
            exit 1
          fi

          # Extract release version from PR title
          if [[ $PR_TITLE =~ "Promote (v[0-9]+\.[0-9]+\.[0-9]+)" ]]; then
            RELEASE_VERSION="${BASH_REMATCH[1]}"
            IMAGE_TAG="${RELEASE_VERSION#v}"
            echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to target environment
        run: |
          TARGET_ENV="${{ steps.deploy-info.outputs.target_environment }}"
          IMAGE_TAG="${{ steps.deploy-info.outputs.image_tag }}"
          RELEASE_VERSION="${{ steps.deploy-info.outputs.release_version }}"

          echo "ðŸš€ Starting deployment to $TARGET_ENV"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
          echo "Release: $RELEASE_VERSION"

          # Trigger deployment via repository dispatch to base-infra
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TRIGGER_WORKFLOW_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/magebase/base-infra/dispatches \
            -d "{\"event_type\":\"deploy-application\", \"client_payload\":{\"repository\":\"${{ github.repository }}\",\"tag_name\":\"$RELEASE_VERSION\", \"to_environment\": \"$TARGET_ENV\", \"regions\": [\"fsn1\"]}}"

          echo "âœ… Deployment triggered for $TARGET_ENV"

      - name: Create next promotion PR
        run: |
          TARGET_ENV="${{ steps.deploy-info.outputs.target_environment }}"
          RELEASE_VERSION="${{ steps.deploy-info.outputs.release_version }}"
          IMAGE_TAG="${{ steps.deploy-info.outputs.image_tag }}"
          RELEASE_BRANCH="release/${RELEASE_VERSION}"

          # Determine next environment in the chain
          case "$TARGET_ENV" in
            "qa")
              NEXT_ENV="uat"
              NEXT_SOURCE="qa"
              ;;
            "uat")
              NEXT_ENV="prod"
              NEXT_SOURCE="uat"
              ;;
            "prod")
              echo "âœ… Final deployment to production completed"
              exit 0
              ;;
            *)
              echo "Unknown target environment: $TARGET_ENV"
              exit 1
              ;;
          esac

          echo "Creating promotion PR for $NEXT_SOURCE â†’ $NEXT_ENV"

          # Checkout the existing release branch
          git checkout $RELEASE_BRANCH
          git pull origin $RELEASE_BRANCH

          # Update next environment k8s configuration
          TARGET_OVERLAY_DIR="k8s/overlays/$NEXT_ENV"
          if [ ! -d "$TARGET_OVERLAY_DIR" ]; then
            echo "Creating overlay directory for $NEXT_ENV"
            mkdir -p "$TARGET_OVERLAY_DIR"

            # Create kustomization.yaml
            cat > "$TARGET_OVERLAY_DIR/kustomization.yaml" << 'EOF'
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization

          resources:
            - ../../base

          patchesStrategicMerge:
            - ${NEXT_ENV}-patches.yaml

          configMapGenerator:
            - name: magebase-config
              behavior: replace
              literals:
                - RAILS_ENV=production
                - RAILS_LOG_TO_STDOUT=true
                - RAILS_SERVE_STATIC_FILES=true

          secretGenerator:
            - name: magebase-secrets
              behavior: replace
              literals:
                - secret-key-base=${SECRET_KEY_BASE}
                - ruby-llm-api-key=${RUBY_LLM_API_KEY}
                - aws-ses-access-key-id=${AWS_SES_ACCESS_KEY_ID}
                - aws-ses-secret-access-key=${AWS_SES_SECRET_ACCESS_KEY}
          EOF

            # Create environment-specific patches
            cat > "$TARGET_OVERLAY_DIR/${NEXT_ENV}-patches.yaml" << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: magebase-app
            namespace: magebase
          spec:
            template:
              spec:
                containers:
                  - name: magebase
                    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          EOF

            echo "âœ… Created k8s overlay for $NEXT_ENV"
          else
            echo "Overlay directory exists, updating image tag"
            # Update existing overlay with new image tag
            sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" "$TARGET_OVERLAY_DIR/${NEXT_ENV}-patches.yaml"
          fi

          # Stage and commit changes
          git add k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: promote ${RELEASE_VERSION} to ${NEXT_ENV} environment

          - Updated k8s configuration for ${NEXT_ENV}
          - Image tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          - Source environment: ${NEXT_SOURCE}
          - Target environment: ${NEXT_ENV}"
            git push origin HEAD
          fi

          # Create promotion PR
          EXISTING_PR=$(gh pr list --head "$RELEASE_BRANCH" --json number --jq '.[0].number')

          if [ -n "$EXISTING_PR" ]; then
            echo "PR #$EXISTING_PR already exists for $RELEASE_BRANCH"
          else
            # Create new PR
            PR_TITLE="ðŸš€ Promote $RELEASE_VERSION to $NEXT_ENV"
            PR_BODY=$(cat <<EOF
          ## ðŸš€ Environment Promotion

          **Release:** $RELEASE_VERSION
          **From:** $NEXT_SOURCE
          **To:** $NEXT_ENV
          **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}\`

          ### Changes
          - Updated Kubernetes configuration for $NEXT_ENV environment
          - Image tag updated to match release version
          - Ready for deployment to $NEXT_ENV

          ### Checklist
          - [ ] Code review completed
          - [ ] Tests passing in $NEXT_SOURCE
          - [ ] Performance validated
          - [ ] Security scan passed
          - [ ] Ready for $NEXT_ENV deployment

          /cc @magebase/dev-team
          EOF
          )

            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --head "$RELEASE_BRANCH" \
              --base "main" \
              --label "environment-promotion,$NEXT_ENV"

            echo "âœ… Created PR for $NEXT_ENV promotion"
          fi

  trigger-infra-workflow:
    name: Trigger Infrastructure Workflow
    runs-on: ubicloud-standard-2-arm
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Send Repository Dispatch
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TRIGGER_WORKFLOW_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/magebase/base-infra/dispatches \
            -d '{"event_type":"trigger-workflow", "client_payload":{"repository":"${{ github.repository }}","tag_name":"${{ github.event.release.tag_name }}", "to_environment": "dev", "regions": ["fsn1"]}}'
