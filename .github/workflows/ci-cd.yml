name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: |
          bundle install
          yarn install

      - name: Set up database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate
          bundle exec rails db:seed

      - name: Run Ruby tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: bundle exec rails test

      - name: Run system tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: bundle exec rails test:system

      - name: Run JavaScript tests
        run: yarn test

      - name: Run security audit
        run: bundle audit check --update

      - name: Run Brakeman security scan
        run: bundle exec brakeman

      - name: Run RuboCop
        run: bundle exec rubocop

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.environment }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  deploy:
    name: Trigger GitOps Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Kubernetes manifests
        run: |
          # Update the image tag in the Kubernetes deployment manifest
          sed -i "s|image:.*|image: ${{ needs.build.outputs.image-url }}|g" k8s/deployment.yaml

          # Commit the changes to trigger ArgoCD sync
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add k8s/deployment.yaml
          git commit -m "chore: update image to ${{ github.sha }}" || echo "No changes to commit"

          # Push changes to trigger ArgoCD
          git push origin HEAD:main

      - name: Trigger ArgoCD Sync
        run: |
          # This would trigger ArgoCD to sync the application
          # In a real setup, you'd use the ArgoCD CLI or API
          echo "🔄 Triggering ArgoCD sync for application: magebase-${{ github.event.inputs.environment || 'dev' }}"

          # For now, we'll simulate the sync trigger
          # In production, you'd call: argocd app sync magebase-${{ github.event.inputs.environment || 'dev' }}

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          # In production, you'd poll ArgoCD or Kubernetes API for deployment status
          sleep 30
          echo "✅ Deployment triggered successfully"

  security-scan:
    name: Security and Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: ${{ needs.build.outputs.image-url }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build, deploy, security-scan]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ **GitOps Deployment:** Triggered successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitOps Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.build.outputs.image-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** Singapore (ap-southeast)" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture:** Hetzner Cloud + k3s + ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** GitHub Container Registry" >> $GITHUB_STEP_SUMMARY

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release-notes
        run: |
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Deployment" >> $GITHUB_OUTPUT
          echo "- ✅ Deployed via GitOps (ArgoCD)" >> $GITHUB_OUTPUT
          echo "- ✅ Image pushed to GitHub Container Registry" >> $GITHUB_OUTPUT
          echo "- ✅ Security scan completed" >> $GITHUB_OUTPUT
          echo "- ✅ All tests passing" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Architecture" >> $GITHUB_OUTPUT
          echo "- **Provider:** Hetzner Cloud (k3s)" >> $GITHUB_OUTPUT
          echo "- **GitOps:** ArgoCD" >> $GITHUB_OUTPUT
          echo "- **Registry:** GitHub Container Registry" >> $GITHUB_OUTPUT
          echo "- **DNS:** Cloudflare" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ steps.release-notes.outputs.release_notes }}
          draft: false
          prerelease: false
