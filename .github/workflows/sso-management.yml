name: AWS Organizations & SSO Management Pipeline

# This pipeline manages AWS Organizations accounts and AWS SSO/IAM Identity Center
# It ensures proper dependency ordering: Organizations ‚Üí SSO
#
# What it does:
# 1. Creates AWS Organization accounts (Development & Production)
# 2. Sets up AWS SSO with permission sets and user groups
# 3. Assigns SSO permissions to the created accounts
#
# Triggered by changes to:
# - infra/organizations/** (AWS account creation)
# - infra/sso/** (SSO configuration)
# - infra/main.tf (root orchestration)
# - infra/variables.tf (variable definitions)

on:
  push:
    branches: [main]
    paths:
      - "infra/organizations/**"
      - "infra/sso/**"
      - "infra/main.tf"
      - "infra/variables.tf"
      - ".github/workflows/sso-management.yml"
  pull_request:
    branches: [main]
    paths:
      - "infra/organizations/**"
      - "infra/sso/**"
      - "infra/main.tf"
      - "infra/variables.tf"
      - ".github/workflows/sso-management.yml"

env:
  TF_VERSION: "1.5.0"
  TF_WORKING_DIR: infra
  AWS_REGION: us-east-1 # Organizations must be in us-east-1
  SSO_REGION: ap-southeast-1

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Validate Variables
        run: |
          if [ -z "${{ vars.MANAGEMENT_ACCOUNT_ID }}" ]; then
            echo "‚ùå Error: MANAGEMENT_ACCOUNT_ID variable is not set"
            echo "üìã Please set the MANAGEMENT_ACCOUNT_ID variable in your repository settings"
            echo "üìñ See infra/sso/AWS_SETUP_GUIDE.md for detailed setup instructions"
            exit 1
          fi
          echo "‚úÖ MANAGEMENT_ACCOUNT_ID variable is configured"
          echo "üîç Account ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.MANAGEMENT_ACCOUNT_ID }}:role/GitHubActionsSSORole
          aws-region: ${{ env.AWS_REGION }}
        timeout-minutes: 5

      - name: Configure AWS Credentials for SSO Region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.MANAGEMENT_ACCOUNT_ID }}:role/GitHubActionsSSORole
          aws-region: ${{ env.SSO_REGION }}
          role-session-name: SSOConfig
        timeout-minutes: 5

      - name: Validate AWS Credentials
        run: |
          echo "Validating AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials configured successfully"

      - name: Validate Account Creation Prerequisites
        run: |
          echo "üîç Validating prerequisites for AWS account creation..."

          # Check if organization already exists
          if aws organizations describe-organization >/dev/null 2>&1; then
            echo "‚úÖ AWS Organization already exists"
            aws organizations describe-organization | jq '.Organization.Id'
          else
            echo "‚ÑπÔ∏è  AWS Organization will be created"
          fi

          # Check if SSO is already enabled
          if aws sso-admin list-instances >/dev/null 2>&1; then
            echo "‚úÖ AWS SSO is already enabled"
          else
            echo "‚ÑπÔ∏è  AWS SSO will be enabled during deployment"
          fi

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init -input=false -upgrade
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false -var-file="dev.tfvars" \
            -var="hcloud_token=dummy" \
            -var="cloudflare_api_token=dummy" \
            -var="aws_ses_account_id=dummy" \
            -var="database_url=dummy" \
            -var="cache_database_url=dummy" \
            -var="secret_key_base=dummy" \
            -var="ruby_llm_api_key=dummy" \
            -var="aws_ses_access_key_id=dummy" \
            -var="aws_ses_secret_access_key=dummy" \
            -var="hetzner_object_storage_access_key=dummy" \
            -var="hetzner_object_storage_secret_key=dummy" \
            -var="stripe_api_key=dummy" \
            -var="stripe_webhook_secret=dummy"
        continue-on-error: true
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Validate üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Validate Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Validating Terraform plan for account creation and SSO assignments..."

          # Check if plan contains expected resources
          if echo "${{ steps.plan.outputs.stdout }}" | grep -q "aws_organizations_account"; then
            echo "‚úÖ Plan contains AWS account creation"
          else
            echo "‚ö†Ô∏è  No AWS account creation found in plan"
          fi

          if echo "${{ steps.plan.outputs.stdout }}" | grep -q "aws_ssoadmin_account_assignment"; then
            echo "‚úÖ Plan contains SSO account assignments"
          else
            echo "‚ö†Ô∏è  No SSO account assignments found in plan"
          fi

          # Check for empty account IDs (the original error)
          if echo "${{ steps.plan.outputs.stdout }}" | grep -q 'target_id.*""'; then
            echo "‚ùå ERROR: Found empty account IDs in plan - this will cause SSO assignment failures"
            exit 1
          else
            echo "‚úÖ No empty account IDs found in plan"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Applying AWS Organizations and SSO configuration..."

          # Apply with dummy values for non-AWS variables
          terraform apply -auto-approve -input=false -var-file="dev.tfvars" \
            -var="hcloud_token=dummy" \
            -var="cloudflare_api_token=dummy" \
            -var="aws_ses_account_id=dummy" \
            -var="database_url=dummy" \
            -var="cache_database_url=dummy" \
            -var="secret_key_base=dummy" \
            -var="ruby_llm_api_key=dummy" \
            -var="aws_ses_access_key_id=dummy" \
            -var="aws_ses_secret_access_key=dummy" \
            -var="hetzner_object_storage_access_key=dummy" \
            -var="hetzner_object_storage_secret_key=dummy" \
            -var="stripe_api_key=dummy" \
            -var="stripe_webhook_secret=dummy"

          echo "‚úÖ AWS Organizations and SSO configuration applied successfully"

          # Show the created account IDs
          echo "üìã Created AWS Account IDs:"
          terraform output -json | jq '.development_account_id.value, .production_account_id.value'
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Verify SSO Configuration
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üîç Verifying SSO configuration..."

          # Check if SSO instances exist
          if aws sso-admin list-instances --region ${{ env.SSO_REGION }} >/dev/null 2>&1; then
            echo "‚úÖ AWS SSO is properly configured"
            aws sso-admin list-instances --region ${{ env.SSO_REGION }} | jq '.Instances[] | {InstanceArn, IdentityStoreId}'
          else
            echo "‚ö†Ô∏è  AWS SSO configuration may be incomplete"
          fi

          # Check account assignments for development account
          echo "üìã SSO Account Assignments (Development):"
          DEV_ACCOUNT_ID=$(terraform output -raw development_account_id)
          if [ -n "$DEV_ACCOUNT_ID" ]; then
            aws sso-admin list-account-assignments --region ${{ env.SSO_REGION }} \
              --account-id "$DEV_ACCOUNT_ID" \
              --permission-set-arn $(aws sso-admin list-permission-sets --region ${{ env.SSO_REGION }} | jq -r '.PermissionSets[0]') 2>/dev/null || echo "No assignments found for development account"
          fi

          # Check account assignments for production account
          echo "üìã SSO Account Assignments (Production):"
          PROD_ACCOUNT_ID=$(terraform output -raw production_account_id)
          if [ -n "$PROD_ACCOUNT_ID" ]; then
            aws sso-admin list-account-assignments --region ${{ env.SSO_REGION }} \
              --account-id "$PROD_ACCOUNT_ID" \
              --permission-set-arn $(aws sso-admin list-permission-sets --region ${{ env.SSO_REGION }} | jq -r '.PermissionSets[0]') 2>/dev/null || echo "No assignments found for production account"
          fi
        working-directory: ${{ env.TF_WORKING_DIR }}
