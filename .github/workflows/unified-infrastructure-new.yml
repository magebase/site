name: Unified Infrastructure Pipeline

# This pipeline manages the complete infrastructure deployment with proper dependency ordering:
# 1. Terraform State Backend Bootstrap (creates S3 + DynamoDB for state management)
# 2. Infrastructure Deployment (Hetzner k3s, Cloudflare, etc.)
# 3. Validation & Testing
# 4. Security Scanning

on:
  push:
    branches: [main]
    paths:
      - "infra/**"
      - "k8s/**"
      - ".github/workflows/unified-infrastructure.yml"
  pull_request:
    branches: [main]
    paths:
      - "infra/**"
      - "k8s/**"
      - ".github/workflows/unified-infrastructure.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy infrastructure to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
      action:
        description: "Action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.8.0"
  INFRA_REGION: ap-southeast-1

jobs:
  # ===== TERRAFORM STATE BACKEND BOOTSTRAP =====
  bootstrap:
    name: "Terraform State Backend Bootstrap"
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: write
    env:
      TF_WORKING_DIR: infra/pipeline
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.action != 'plan'
    outputs:
      state_bucket: ${{ steps.bootstrap.outputs.state_bucket }}
      dynamodb_table: ${{ steps.bootstrap.outputs.dynamodb_table }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Variables
        run: |
          if [ -z "${{ vars.MANAGEMENT_ACCOUNT_ID }}" ]; then
            echo "‚ùå Error: MANAGEMENT_ACCOUNT_ID variable is not set"
            exit 1
          fi
          echo "‚úÖ MANAGEMENT_ACCOUNT_ID configured"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.MANAGEMENT_ACCOUNT_ID }}:role/${{ vars.AWS_PIPELINE_ROLE }}
          aws-region: ${{ env.INFRA_REGION }}

      - name: Bootstrap Terraform State Backend
        id: bootstrap
        run: |
          cd ${{ env.TF_WORKING_DIR }}/bootstrap
          echo "üöÄ Bootstrapping Terraform state backend..."

          STATE_BUCKET="magebase-tf-state-management-ap-southeast-1"
          DYNAMODB_TABLE="magebase-terraform-locks-management"

          # Check if resources exist
          if aws s3 ls "s3://$STATE_BUCKET" >/dev/null 2>&1 && aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" >/dev/null 2>&1; then
            echo "‚úÖ Bootstrap resources already exist"
          else
            terraform init -upgrade
            terraform apply -auto-approve -var-file=terraform.tfvars
          fi

          echo "state_bucket=$STATE_BUCKET" >> $GITHUB_OUTPUT
          echo "dynamodb_table=$DYNAMODB_TABLE" >> $GITHUB_OUTPUT

  # ===== SITE INFRASTRUCTURE DEPLOYMENT =====
  site-infrastructure:
    name: "Site Infrastructure Deployment"
    runs-on: self-hosted
    needs: [bootstrap]
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    if: needs.bootstrap.result == 'success' && (github.event_name != 'workflow_dispatch' || github.event.inputs.action != 'plan')
    defaults:
      run:
        working-directory: infra/pipeline/site-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.MANAGEMENT_ACCOUNT_ID }}:role/${{ vars.AWS_PIPELINE_ROLE }}
          aws-region: ${{ env.INFRA_REGION }}

      - name: Terraform Init
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          terraform init -upgrade \
            -backend-config="bucket=${{ needs.bootstrap.outputs.state_bucket }}" \
            -backend-config="key=magebase/site-infrastructure/${ENVIRONMENT}/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        id: tf-plan
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
          TF_VAR_aws_ses_access_key_id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
          TF_VAR_aws_ses_secret_access_key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
        run: terraform plan -no-color -out=tfplan

      - name: Terraform Plan (Push to Main)
        id: tf-plan-main
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
          TF_VAR_aws_ses_access_key_id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
          TF_VAR_aws_ses_secret_access_key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
        run: |
          terraform plan -no-color -out=tfplan

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.tf-plan.outputs.stdout || steps.tf-plan-main.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Site Infrastructure Deployment üèóÔ∏è
            #### Terraform Plan üìñ

            <details><summary>Show Plan</summary>
            \`\`\`\n${process.env.PLAN}\`\`\`
            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
          TF_VAR_aws_ses_access_key_id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
          TF_VAR_aws_ses_secret_access_key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
          TF_VAR_aws_ses_access_key_id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
          TF_VAR_aws_ses_secret_access_key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve

  # ===== NOTIFICATION =====
  notify:
    name: "Pipeline Notification"
    runs-on: self-hosted
    needs: [bootstrap, site-infrastructure]
    if: always()
    steps:
      - name: Success
        if: needs.site-infrastructure.result == 'success'
        run: echo "‚úÖ Deployment completed successfully"

      - name: Failure
        if: needs.site-infrastructure.result == 'failure'
        run: |
          echo "‚ùå Deployment failed"
          exit 1
