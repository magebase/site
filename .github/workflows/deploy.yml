name: Deploy to Kubernetes

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Store secrets in SSM Parameter Store
        run: |
          # Rails secrets
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/SECRET_KEY_BASE" \
            --value "${{ secrets.SECRET_KEY_BASE }}" --type "SecureString" --overwrite

          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/RUBY_LLM_API_KEY" \
            --value "${{ secrets.RUBY_LLM_API_KEY }}" --type "SecureString" --overwrite

          # AWS SES
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/AWS_SES_ACCESS_KEY_ID" \
            --value "${{ secrets.AWS_SES_ACCESS_KEY_ID }}" --type "SecureString" --overwrite

          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/AWS_SES_SECRET_ACCESS_KEY" \
            --value "${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}" --type "SecureString" --overwrite

          # AWS S3
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/AWS_S3_ACCESS_KEY_ID" \
            --value "${{ secrets.AWS_S3_ACCESS_KEY_ID }}" --type "SecureString" --overwrite

          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/AWS_S3_SECRET_ACCESS_KEY" \
            --value "${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}" --type "SecureString" --overwrite

          # Database
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/DATABASE_URL" \
            --value "${{ secrets.DATABASE_URL }}" --type "SecureString" --overwrite

          # Redis
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/REDIS_URL" \
            --value "${{ secrets.REDIS_URL }}" --type "SecureString" --overwrite

          # Stripe
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/STRIPE_PUBLISHABLE_KEY" \
            --value "${{ secrets.STRIPE_PUBLISHABLE_KEY }}" --type "SecureString" --overwrite

          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/STRIPE_SECRET_KEY" \
            --value "${{ secrets.STRIPE_SECRET_KEY }}" --type "SecureString" --overwrite

          # Discord
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/DISCORD_WEBHOOK_URL" \
            --value "${{ secrets.DISCORD_WEBHOOK_URL }}" --type "SecureString" --overwrite

          # SMTP
          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/SMTP_USERNAME" \
            --value "${{ secrets.SMTP_USERNAME }}" --type "SecureString" --overwrite

          aws ssm put-parameter --name "/site/${{ env.ENVIRONMENT }}/SMTP_PASSWORD" \
            --value "${{ secrets.SMTP_PASSWORD }}" --type "SecureString" --overwrite

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/magebase/site:${{ env.ENVIRONMENT }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update ArgoCD application
        run: |
          # This would typically use argocd CLI or API to update the image tag
          # For now, we'll just show the command structure
          echo "ArgoCD application update would go here"
          echo "Image: ghcr.io/magebase/site:${{ env.ENVIRONMENT }}-${{ github.sha }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"

      - name: Verify deployment
        run: |
          # Add health check commands here
          echo "Deployment verification would go here"
