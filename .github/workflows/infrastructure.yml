name: Infrastructure Validation

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/infrastructure.yml"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/infrastructure.yml"

env:
  TF_VERSION: "1.5.0"
  TF_WORKING_DIR: "./terraform"

jobs:
  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -backend=false
          terraform validate

      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          framework: terraform
          output_format: cli
          output_file_path: console,checkov-report.sarif
          soft_fail: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-report.sarif

  test-terraform:
    name: Test Terraform Configuration
    runs-on: ubuntu-latest
    needs: validate-terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Test Development Configuration
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -backend=false
          terraform plan -var-file="dev.tfvars" -no-color -out=tfplan-dev
          terraform show -json tfplan-dev > tfplan-dev.json

      - name: Test Production Configuration
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -var-file="prod.tfvars" -no-color -out=tfplan-prod
          terraform show -json tfplan-prod > tfplan-prod.json

      - name: Validate Plan Outputs
        run: |
          # Check that plans were generated successfully
          if [ ! -f "terraform/tfplan-dev.json" ] || [ ! -f "terraform/tfplan-prod.json" ]; then
            echo "❌ Plan files not generated"
            exit 1
          fi

          # Check for errors in plans
          if grep -q '"error"' terraform/tfplan-dev.json || grep -q '"error"' terraform/tfplan-prod.json; then
            echo "❌ Errors found in terraform plans"
            cat terraform/tfplan-dev.json
            cat terraform/tfplan-prod.json
            exit 1
          fi

          echo "✅ Terraform plans validated successfully"

  security-scan:
    name: Security and Compliance Scan
    runs-on: ubuntu-latest
    needs: validate-terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './terraform'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: Validation Results
    runs-on: ubuntu-latest
    needs: [validate-terraform, test-terraform, security-scan]
    if: always()

    steps:
      - name: Create validation summary
        run: |
          echo "## 🔍 Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate-terraform.result }}" == "success" ]; then
            echo "✅ **Terraform Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Terraform Validation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-terraform.result }}" == "success" ]; then
            echo "✅ **Terraform Testing:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Terraform Testing:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Architecture:" >> $GITHUB_STEP_SUMMARY
          echo "- **Provider:** Hetzner Cloud (k3s)" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** Singapore (ap-southeast)" >> $GITHUB_STEP_SUMMARY
          echo "- **DNS:** Cloudflare" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Registry:** GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- **GitOps:** ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring:** Prometheus + Grafana" >> $GITHUB_STEP_SUMMARY
