name: Infrastructure CI/CD

on:
  push:
    branches: [main]
    paths:
      - "infra/**"
      - "terraform/**"
      - "k8s/**"
      - ".github/workflows/infrastructure.yml"
  pull_request:
    branches: [main]
    paths:
      - "infra/**"
      - "terraform/**"
      - "k8s/**"
      - ".github/workflows/infrastructure.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy infrastructure to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
      action:
        description: "Action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.5.0"
  TF_WORKING_DIR: "./infra"

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      tf_plan_exitcode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials for SES
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Terraform Init
        id: init
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          terraform init -upgrade

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          terraform validate

      - name: Terraform Format Check
        id: fmt
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          terraform fmt -check -recursive

      - name: Terraform Plan
        id: tf-plan
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && steps.tf-plan.outcome == 'success'
        env:
          PLAN: "terraform\n${{ steps.tf-plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Validate 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.tf-plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  test-terraform:
    name: Test Terraform Configuration
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Test Development Configuration
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -backend=false
          terraform plan -var-file="dev.tfvars" -no-color -out=tfplan-dev
          terraform show -json tfplan-dev > tfplan-dev.json

      - name: Test Production Configuration
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -var-file="prod.tfvars" -no-color -out=tfplan-prod
          terraform show -json tfplan-prod > tfplan-prod.json

      - name: Validate Plan Outputs
        run: |
          # Check that plans were generated successfully
          if [ ! -f "terraform/tfplan-dev.json" ] || [ ! -f "terraform/tfplan-prod.json" ]; then
            echo "❌ Plan files not generated"
            exit 1
          fi

          # Check for errors in plans
          if grep -q '"error"' terraform/tfplan-dev.json || grep -q '"error"' terraform/tfplan-prod.json; then
            echo "❌ Errors found in terraform plans"
            cat terraform/tfplan-dev.json
            cat terraform/tfplan-prod.json
            exit 1
          fi

          echo "✅ Terraform plans validated successfully"

  security-scan:
    name: Security and Compliance Scan
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "./terraform"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  notify:
    name: Validation Results
    runs-on: ubuntu-latest
    needs: [validate, test-terraform, security-scan]
    if: always()

    steps:
      - name: Create validation summary
        run: |
          echo "## 🔍 Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "✅ **Terraform Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Terraform Validation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-terraform.result }}" == "success" ]; then
            echo "✅ **Terraform Testing:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Terraform Testing:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Architecture:" >> $GITHUB_STEP_SUMMARY
          echo "- **Provider:** Hetzner Cloud (k3s)" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** Singapore (ap-southeast)" >> $GITHUB_STEP_SUMMARY
          echo "- **DNS:** Cloudflare" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Registry:** GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- **GitOps:** ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring:** Prometheus + Grafana" >> $GITHUB_STEP_SUMMARY
