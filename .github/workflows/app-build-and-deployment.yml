name: Magebase App Build & Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'app/**'
      - 'config/**'
      - 'db/**'
      - 'lib/**'
      - 'Gemfile*'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'k8s/deployment.yaml'
      - '.github/workflows/rails-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'app/**'
      - 'config/**'
      - 'db/**'
      - 'lib/**'
      - 'Gemfile*'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/rails-deployment.yml'
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy application to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
      release_type:
        description: 'Release type (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip running tests (not recommended)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  packages: write
  attestations: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: magebase/site
  DOCKER_BUILDKIT: 1
  TF_VAR_google_studio_api_key: ${{ secrets.GOOGLE_STUDIO_API_KEY }}
  TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
  TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

jobs:
  semantic-release-dry-run:
    name: Semantic Release Dry Run
    runs-on: ubicloud-standard-2-arm
    if: success()
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release dry run
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          branches: main
          dry_run: true
          extra_plugins: |
            @semantic-release/git
            @semantic-release/github
            @semantic-release/changelog
            @semantic-release/exec
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Comprehensive Tests
    runs-on: ubicloud-standard-2-arm
    needs: security
    if: success()
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: magebase_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --name postgres-test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install dependencies
        run: |
          bundle install
          npm install

      - name: Verify Playwright setup
        run: |
          # Verify Ruby gems are installed
          bundle exec ruby -e "require 'playwright'; puts 'Playwright Ruby gem loaded successfully'"
          bundle exec ruby -e "require 'capybara-playwright-driver'; puts 'Capybara Playwright driver loaded successfully'"

      - name: Install Playwright browsers
        run: |
          # Install Playwright browsers
          npx playwright install chromium || ./node_modules/.bin/playwright install chromium || playwright install chromium
          # Verify playwright installation
          npx playwright --version || ./node_modules/.bin/playwright --version || playwright --version

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
              if pg_isready -h localhost -p 5432 -U postgres; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "Attempt $i: PostgreSQL not ready yet..."
              sleep 2
            done

            # Final check
            if ! pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL failed to start"
              exit 1
            fi
      - name: Set up database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: |
          # Drop database if it exists to ensure clean state
          bundle exec rails db:drop || echo "Database doesn't exist, continuing..."

          # Create fresh database
          bundle exec rails db:create

          # Run migrations
          bundle exec rails db:migrate

          # Seed database (with error handling)
          echo "Seeding database..."
          bundle exec rails db:seed || echo "Seeding completed with warnings"

      - name: Run Ruby tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: bundle exec rails test

      - name: Run system tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: bundle exec rails test:system

      - name: Run JavaScript tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
        run: npm test

      - name: Skip Tests (Optional)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'true'
        run: |
          echo "🧪 Tests skipped as requested"
          echo "test_results=skipped" >> $GITHUB_OUTPUT

  lint:
    name: Code Quality & Linting
    runs-on: ubicloud-standard-2-arm
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          bundle install
          npm install

      - name: Run RuboCop
        run: bundle exec rubocop --parallel

      - name: Run Prettier
        run: |
          echo "Running Prettier to fix formatting issues..."
          npx prettier --write "**/*.{js,jsx,ts,tsx,json,yaml,yml}" --loglevel silent
          if [ $? -eq 0 ]; then
            echo "✅ Prettier formatting completed successfully"
          else
            echo "❌ Prettier encountered issues"
            exit 1
          fi

      - name: Check code formatting
        run: |
          bundle exec rubocop --format offenses

  security:
    name: Security Audit & Scan
    runs-on: ubicloud-standard-2-arm
    needs: lint
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: false

      - name: Install dependencies
        run: bundle install

      - name: Run bundle audit
        run: bundle exec bundle-audit check --update

      - name: Run Brakeman security scan
        run: bundle exec brakeman -q -f json -o brakeman-report.json

      - name: Upload Brakeman results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-report
          path: brakeman-report.json

  build:
    name: Build Docker Image
    runs-on: ubicloud-standard-2-arm
    needs: semantic-release-dry-run
    if: success()
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.meta.outputs.tags }}
      new_release_published: ${{ needs.semantic-release-dry-run.outputs.new_release_published }}
      new_release_version: ${{ needs.semantic-release-dry-run.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: false
          lfs: false

      - name: Set outputs for dry run
        if: github.event_name == 'pull_request'
        run: |
          echo "new_release_published=false" >> $GITHUB_OUTPUT
          echo "new_release_version=dry-run" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Warm up Docker cache
        run: |
          # Try to pull the latest image to warm up the cache
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "No existing image to pull"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.semantic-release-dry-run.outputs.new_release_version }},enable=${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' }}
            type=raw,value=v${{ needs.semantic-release-dry-run.outputs.new_release_version }},enable=${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build-${{ github.ref_name }}
            type=gha,scope=build-main
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: |
            type=gha,scope=build-${{ github.ref_name }},mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/arm64
          provenance: false
          sbom: false
          outputs: |
            type=image,push=true
            type=docker

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   continue-on-error: true
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.build.outputs.digest }}
      #     push-to-registry: true

      - name: Verify Docker tags
        run: |
          echo "Verifying Docker image tags..."
          if [ "${{ needs.semantic-release-dry-run.outputs.new_release_published }}" == "true" ]; then
            echo "New release published: ${{ needs.semantic-release-dry-run.outputs.new_release_version }}"
            echo "Checking for Docker tags:"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release-dry-run.outputs.new_release_version }}"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.semantic-release-dry-run.outputs.new_release_version }}"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          else
            echo "No new release published"
            echo "Checking for Docker tags:"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          fi

  security-scan:
    name: Container Security Scan
    runs-on: ubicloud-standard-2-arm
    needs: build
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine scan image
        id: scan-image
        run: |
          # Use the latest image for main branch, or commit SHA image for others
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Wait for image to be available
        run: |
          echo "Waiting for image ${{ steps.scan-image.outputs.image }} to be available..."
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking if image exists..."

            # Try to pull the image to check if it exists
            if docker pull ${{ steps.scan-image.outputs.image }} 2>/dev/null; then
              echo "✅ Image is available!"
              break
            else
              echo "⏳ Image not yet available, waiting 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Image did not become available within 5 minutes"
            exit 1
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: ${{ steps.scan-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event.repository.private == false
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check SARIF upload status
        if: always()
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "✅ Trivy SARIF file generated successfully"
            echo "📊 SARIF file size: $(stat -f%z trivy-results.sarif 2>/dev/null || stat -c%s trivy-results.sarif 2>/dev/null || echo 'unknown') bytes"

            # Check if Advanced Security is likely enabled
            if [ "${{ github.event.repository.private }}" == "false" ]; then
              echo "ℹ️  Repository is public - SARIF upload attempted"
              echo "📋 If upload failed, enable GitHub Advanced Security for this repository:"
              echo "   Settings → Security → Code security → Enable CodeQL analysis"
            else
              echo "🔒 Repository is private - Advanced Security may not be available"
            fi
          else
            echo "⚠️  Trivy SARIF file not found"
          fi

  deploy:
    name: Trigger deployment to ArgoCD
    runs-on: ubicloud-standard-2-arm
    needs: build
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Update Kubernetes Deployment
        run: |
          # Determine the image tag to use
          if [ "${{ needs.build.outputs.new_release_published }}" == "true" ]; then
            IMAGE_TAG="v${{ needs.build.outputs.new_release_version }}"
            echo "Using semantic release version: $IMAGE_TAG"
          else
            IMAGE_TAG="${{ github.sha }}"
            echo "Using commit SHA: $IMAGE_TAG"
          fi

          # Set the final image
          FINAL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"

          echo "Using image: $FINAL_IMAGE"
          sed -i "s|image:.*|image: $FINAL_IMAGE|g" k8s/deployment.yaml

          # Commit the changes to trigger ArgoCD sync
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add k8s/deployment.yaml
          git commit -m "chore: update application image to ${IMAGE_TAG}" || echo "No changes to commit"

          # Pull latest changes to avoid conflicts
          git pull origin main --rebase

          # Push changes to trigger ArgoCD
          git push origin HEAD:main

      - name: Run Health Checks
        run: |
          # Wait for application to be ready
          sleep 30

          # Run health checks
          curl -f https://${{ github.event.inputs.environment != 'prod' && format('{0}.', github.event.inputs.environment || 'dev')}}magebase.dev/health

  performance-test:
    name: Performance Testing
    runs-on: ubicloud-standard-2-arm
    needs: deploy
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://magebase.dev
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # cleanup:
  #   name: Cleanup Old Images
  #   runs-on: ubicloud-standard-2-arm
  #   needs: [build, deploy]
  #   if: success() && needs.build.outputs.new_release_published == 'true'

  #   steps:
  #     - name: Delete old container images
  #       uses: actions/delete-package-versions@v5
  #       with:
  #         package-name: ${{ env.IMAGE_NAME }}
  #         package-type: container
  #         min-versions-to-keep: 10
  #         delete-only-untagged-versions: true

  semantic-release-publish:
    name: Semantic Release Publish
    runs-on: ubicloud-standard-2-arm
    needs: [build, security-scan, deploy, performance-test]
    if: success() && needs.semantic-release-dry-run.outputs.new_release_published == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release publish
        uses: cycjimmy/semantic-release-action@v4
        with:
          branches: main
          dry_run: false
          extra_plugins: |
            @semantic-release/git
            @semantic-release/github
            @semantic-release/changelog
            @semantic-release/exec
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Deployment Notification
    runs-on: ubicloud-standard-2-arm
    needs: [
        # test,
        # lint,
        # security,
        # build,
        # security-scan,
        semantic-release-dry-run,
        deploy,
        performance-test,
        semantic-release-publish,
        # cleanup,
      ]
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Unified Rails Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test Results - Temporarily commented out
          # Code Quality - Temporarily commented out
          # Security - Temporarily commented out

          # Build - Temporarily commented out
          # Security Scan - Temporarily commented out

          # Deployment
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ **Deployment:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Performance
          if [ "${{ needs.performance-test.result }}" == "success" ]; then
            echo "✅ **Performance Test:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' && format('v{0}', needs.semantic-release-dry-run.outputs.new_release_version) || github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' && format('v{0}', needs.semantic-release-dry-run.outputs.new_release_version) || github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitOps:** ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture:** Hetzner Cloud + k3s" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** Singapore (ap-southeast)" >> $GITHUB_STEP_SUMMARY

          # Semantic Release Info
          if [ "${{ needs.semantic-release-dry-run.outputs.new_release_published }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Release Information:" >> $GITHUB_STEP_SUMMARY
            echo "- **New Release:** v${{ needs.semantic-release-dry-run.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Release:** Created" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Tags:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.semantic-release-dry-run.outputs.new_release_version }}, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release-dry-run.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Release Information:" >> $GITHUB_STEP_SUMMARY
            echo "- **New Release:** None (no version bump)" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Release:** Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Tags:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack Notification
        if: always() && env.SLACK_WEBHOOK_URL
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "🚀 Unified Rails Deployment ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 Unified Rails Deployment"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Environment:* ${{ github.event.inputs.environment || 'dev' }}\\n*Version:* ${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' && format('v{0}', needs.semantic-release-dry-run.outputs.new_release_version) || github.sha }}\\n*Image:* ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' && format('v{0}', needs.semantic-release-dry-run.outputs.new_release_version) || github.sha }}\\n*Status:* ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}\\n*Triggered by:* @${{ github.actor }}\\n*Semantic Release:* ${{ needs.semantic-release-dry-run.outputs.new_release_published == 'true' && format('✅ v{0}', needs.semantic-release-dry-run.outputs.new_release_version) || '⏭️ Skipped (no version bump)' }}"
                  }
                }
              ]
            }
