name: Application Deployment

on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - "config/**"
      - "db/**"
      - "lib/**"
      - "Gemfile*"
      - "package.json"
      - "yarn.lock"
      - "Dockerfile"
      - "docker-compose.yml"
      - "k8s/deployment.yaml"
      - ".github/workflows/application.yml"
  pull_request:
    branches: [main]
    paths:
      - "app/**"
      - "config/**"
      - "db/**"
      - "lib/**"
      - "Gemfile*"
      - "package.json"
      - "yarn.lock"
      - "Dockerfile"
      - "docker-compose.yml"
      - "k8s/deployment.yaml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy application to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
      version:
        description: "Application version/tag to deploy"
        required: false
        default: "latest"
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Application Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: |
          bundle install
          yarn install

      - name: Set up database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate
          bundle exec rails db:seed

      - name: Run Ruby tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: bundle exec rails test

      - name: Run system tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/magebase_test
        run: bundle exec rails test:system

      - name: Run JavaScript tests
        run: yarn test

      - name: Run security audit
        run: bundle audit check --update

      - name: Run Brakeman security scan
        run: bundle exec brakeman

      - name: Run RuboCop
        run: bundle exec rubocop

  build:
    name: Build Application Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event.inputs.version != 'latest' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  deploy:
    name: Deploy Application via ArgoCD
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Update Kubernetes Deployment
        run: |
          # Update the image tag in the Kubernetes deployment manifest
          IMAGE_TAG=${{ github.sha }}
          if [ "${{ github.event.inputs.version }}" != "latest" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            IMAGE_TAG=${{ github.event.inputs.version }}
          fi

          sed -i "s|image:.*|image: ${{ needs.build.outputs.image-url }}|g" k8s/deployment.yaml

          # Commit the changes to trigger ArgoCD sync
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add k8s/deployment.yaml
          git commit -m "chore: update application image to ${{ github.sha }}" || echo "No changes to commit"

          # Push changes to trigger ArgoCD
          git push origin HEAD:main

      - name: Sync ArgoCD Application
        run: |
          # Login to ArgoCD
          argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }}

          # Sync application
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          argocd app sync magebase-app-${ENVIRONMENT}
          argocd app wait magebase-app-${ENVIRONMENT} --timeout 600

      - name: Run Health Checks
        run: |
          # Wait for application to be ready
          sleep 30

          # Run health checks
          curl -f https://magebase.dev/health || curl -f https://app-${{ github.event.inputs.environment || 'dev' }}.magebase.dev/health

      - name: Run Smoke Tests
        run: |
          # Run basic smoke tests against the deployed application
          curl -f https://magebase.dev/ || curl -f https://app-${{ github.event.inputs.environment || 'dev' }}.magebase.dev/

  security-scan:
    name: Application Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          scan-ref: ${{ needs.build.outputs.image-url }}
          format: "sarif"
          output: "trivy-app-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-app-results.sarif"

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://magebase.dev
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify:
    name: Application Deployment Notification
    runs-on: ubuntu-latest
    needs: [test, build, deploy, security-scan, performance-test]
    if: always()

    steps:
      - name: Application Deployment Summary
        run: |
          echo "## 🚀 Application Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ **Build:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ **Deployment:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance-test.result }}" == "success" ]]; then
            echo "✅ **Performance Test:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Application Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.build.outputs.image-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitOps:** ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** GitHub Container Registry" >> $GITHUB_STEP_SUMMARY

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "🚀 Application Deployment ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 Application Deployment"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Environment:* ${{ github.event.inputs.environment || 'dev' }}\\n*Version:* ${{ github.event.inputs.version || 'latest' }}\\n*Image:* ${{ needs.build.outputs.image-url }}\\n*Status:* ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}\\n*Triggered by:* @${{ github.actor }}"
                  }
                }
              ]
            }
