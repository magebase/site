name: Terraform Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/terraform-deploy.yml"

env:
  TF_VERSION: "1.5.0"
  TF_WORKING_DIR: "./terraform"
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  terraform:
    name: "Terraform Plan/Apply"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    # Set environment-specific variables
    env:
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_aws_ses_account_id: ${{ secrets.AWS_SES_ACCOUNT_ID }}
      TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME || 'magebase.dev' }}
      TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
      TF_VAR_cache_database_url: ${{ secrets.CACHE_DATABASE_URL }}
      TF_VAR_secret_key_base: ${{ secrets.SECRET_KEY_BASE }}
      TF_VAR_ruby_llm_api_key: ${{ secrets.RUBY_LLM_API_KEY }}
      TF_VAR_aws_ses_access_key_id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
      TF_VAR_aws_ses_secret_access_key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
      TF_VAR_stripe_api_key: ${{ secrets.STRIPE_API_KEY }}
      TF_VAR_stripe_webhook_secret: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials for SES
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Format
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -var-file="${{ github.event.inputs.environment || 'dev' }}.tfvars" -no-color -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Validate ðŸ–Œ\`success\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.action == 'apply'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve tfplan

      - name: Terraform Apply (Manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform destroy -auto-approve -var-file="${{ github.event.inputs.environment || 'dev' }}.tfvars"

      - name: Create Deployment Summary
        if: success()
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ github.event.inputs.action || 'plan' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** âœ… Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”’ Security Notes" >> $GITHUB_STEP_SUMMARY
          echo "- All secrets loaded from GitHub Secrets" >> $GITHUB_STEP_SUMMARY
          echo "- No sensitive data in tfvars files" >> $GITHUB_STEP_SUMMARY
          echo "- AWS credentials configured securely" >> $GITHUB_STEP_SUMMARY
